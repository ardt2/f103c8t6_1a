//******************************************************************************
//
// Файл         : ./f103c8t6_1a/AuxiliaryUnits.h
//
// Дата         : 31 марта 2019 г.
// Описание     : TODO Заголовочный файл проекта f103c8t6_1a.
// Назначение   :
//
//
// Лицензия     : Creative common 3.0
//
// Автор Ardt2 (c) 2019
//
//******************************************************************************

#ifndef __AuxiliaryUnits_H
#define __AuxiliaryUnits_H


// Укажи здесь включаемые(заголовочные и инлайн) файлы, необходимые в этом файле.
// Не полагайся на то, что они будут включены перед этим файлом где-то еще.
// ----------------------------------------------------------------------------
#include <stdint.h>
#include <limits>


// Укажи здесь включаемые(заголовочные и инлайн) файлы, необходимые в каждом
// файле проекта, кроме тех, что уже указаны выше.
// Проверь пути к включаемым файлам в настройках проекта.
// ----------------------------------------------------------------------------


// Укажи здесь объявления типов общих для всего проекта переменных.
// ----------------------------------------------------------------------------
template<typename T, T bits> class _uintnbits_t
{
    private:
        T Num;
        uint8_t Shift = 0;

        constexpr uint8_t ComputeShift(void)
        {
            // только для беззнаковых типов. Впрочем, есть макро IsSigned ).
            T maxt = ~(T)0; // TODO:FIXME constexpr и определение в <limits>
            uint8_t wt = 0;
            for(; maxt != 0 ; wt++)
            {
                maxt >>= 1;
            }

            return wt;
        }

    public:
        _uintnbits_t(T n) : Num(n)
        {
            //__INT_N(uchar8_t);
            // uchar16_t a;

            // только для беззнаковых типов.
            T maxt = ~(T)0; // TODO:FIXME constexpr и определение в <limits>
            for(Shift = 0; maxt != 0 ; Shift++)
            {
                maxt >>= 1;
            }

        }
};

// ----------------------------------------------------------------------------
typedef _uintnbits_t<uint8_t, 6> byte6bit_t;


// ============================================================================
template<typename T, T mod>
class _uintmod_t // : public uinit32_t – так не получится, увы.
{
    private:
        T Num;

    //
    public:
        _uintmod_t(T n) : Num(n)
        {

        }

        // --------------------------------------------------------------------
        operator T & ()     // const const ! Ссылка "&" тут не нужна, конечно.
        {                   // А операторы +=, -=, ++, -- нужны. TODO
            return Num;
        }
        // --------------------------------------------------------------------
//        T operator-=(T r)
//        {
//            Num -= r;
//            return Num;
//        }

};

// Число по модулю.
// ============================================================================
template<unsigned char module>
struct _unsignedmod
{
    unsigned char x;


};


// ============================================================================
template<unsigned char bits, unsigned char maxinbits = 8>
struct _wordbits
{
    // Тут нужен static_assert(maxinbits > bits); TODO
    // ========================================================================
    unsigned short x;

//    const unsigned short maxnumber = powint(2, bits);
//    const float ratio = (float)maxnumber / (float)powint(2, bits);


};

// ----------------------------------------------------------------------------
typedef _wordbits<6> Word6bit; // FIXME


// Укажи здесь "extern" объявления общих для всего проекта переменных.
// ----------------------------------------------------------------------------



// Укажи здесь включаемые файлы взаимодействия с системами проекта
// ----------------------------------------------------------------------------


// ============================================================================
// ----------------------------------------------------------------------------
// TODO




#endif //__AuxiliaryUnits_H
